name: gcp-cc-deploy

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ]
    paths:
      - detections/*.yml
      - buildspec.json
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

#when running commit prior to a push you setup the cli parameters that should trigger a detection
#env:
#  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
permissions:
      contents: read    # This is required for actions/checkout
      id-token: write #GCP Gcloud requires this

jobs:
  CloudCustodianDeploy:
    # The type of runner that the job will run on
    runs-on: Ubuntu-latest
    environment: production
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - uses: google-github-actions/setup-gcloud@v2
      #deploy python and cache requirements
      - name: Setup Python Packages
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      #cc-deployer runs cloud custodian unit tests as dry runs and integration tests with runs that then push a pub/sub message
      #validation of the pub/sub message is based on policy name matching the message requries decoding JSON serialized zlib compression and then base64
      #https://cloudcustodian.io/docs/gcp/policy/genericgcpactions.html#notify
      - name: Run cc-deployer.sh
        run: |
          python cc_deployer.py buildspec.json
